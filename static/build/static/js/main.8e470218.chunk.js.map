{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["htmlToReactParser","Parser","entities","XmlEntities","Post","props","useState","clicked","setClicked","hasContent","item","data","selftext_html","element","decoded","decode","parse","className","onClick","href","url","e","stopPropagation","target","rel","title","Spinner","App","srdata","setSrdata","subreddit","setSubreddit","fetching","setFetching","useEffect","fetchSubredditData","document","children","a","fetch","method","body","JSON","stringify","headers","res","json","posts","map","index","key","toString","onSubmit","preventDefault","value","placeholder","onChange","replace","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTAMIA,G,MAAoB,IAAIC,UACxBC,EAAW,IAAIC,cAwEnB,SAASC,EAAKC,GAAQ,IAAD,EACWC,oBAAS,GADpB,mBACZC,EADY,KACHC,EADG,KAWfC,IAAaJ,EAAMK,KAAKC,KAAKC,cAE7BC,EAAU,KACd,GAAIN,GAAWE,EAAY,CACzB,IAAIK,EAAUZ,EAASa,OAAOV,EAAMK,KAAKC,KAAKC,eAC9CC,EAAUb,EAAkBgB,MAAMF,GAGpC,OACE,6BAASG,UAAU,QACjB,uBAAGA,UAAU,iBAAiBC,QAlBlB,WACdV,GAAYD,KAkBR,yBAAKU,UAAU,QACZR,GAAc,0BAAMQ,UAAU,kBAEjC,uBAAGA,UAAU,kBAAkBE,KAAMd,EAAMK,KAAKC,KAAKS,IAAKF,QAlB5C,SAACG,GACnBA,EAAEC,mBAiBkFC,OAAO,SAASC,IAAI,wBACnGnB,EAAMK,KAAKC,KAAKc,OAElBlB,GAAWM,GACZ,yBAAKI,UAAU,YAAYJ,IAKjC,IAAMa,EAAU,kBACd,yBAAKT,UAAU,WACb,yBAAKA,UAAU,gBAAe,8BAAW,8BAAW,8BAAW,iCAGpDU,EA7Gf,WAAgB,IAAD,EACerB,mBAAS,MADxB,mBACNsB,EADM,KACEC,EADF,OAEqBvB,mBAAS,IAF9B,mBAENwB,EAFM,KAEKC,EAFL,OAGmBzB,oBAAS,GAH5B,mBAGN0B,EAHM,KAGIC,EAHJ,KAKbC,qBAAU,WACRC,EAAmB,UAClB,IAEHD,qBAAU,WACHN,IACLQ,SAASX,MAAQG,EAAOjB,KAAK0B,SAAS,GAAG1B,KAAKmB,UAAY,aAG5D,IAAMK,EAAkB,uCAAG,WAAOL,GAAP,mBAAAQ,EAAA,6DACzBL,GAAY,GACZJ,EAAU,MAENlB,EAAO,CACTmB,aALuB,SAQTS,MAAM,mBAAoB,CACxCC,OAAQ,OACRC,KAAMC,KAAKC,UAAUhC,GACrBiC,QAAS,CACP,eAAgB,sBAZK,UAQrBC,EARqB,yEAiBNA,EAAIC,OAjBE,WAiBrBlB,EAjBqB,0DAoBzBK,GAAY,GACZJ,EAAUD,GArBe,4CAAH,sDAkCpBmB,EAAQ,KAOZ,OANInB,GAAUA,EAAOjB,OACnBoC,EAAQnB,EAAOjB,KAAK0B,SAASW,KAAI,SAACtC,EAAMuC,GACtC,OAAO,kBAAC7C,EAAD,CAAM8C,IAAKD,EAAME,WAAarB,EAAWpB,KAAMA,QAKxD,yBAAKO,UAAU,OACb,gCAAQ,8CACR,0BAAMmC,SAfO,SAAC/B,GAChBA,EAAEgC,iBACFlB,EAAmBL,KAcf,2BACEwB,MAAOxB,EACPyB,YAAY,yBACZC,SAxBkB,SAACnC,GACzB,IAAIiC,EAAQjC,EAAEE,OAAO+B,MAAMG,QAAQ,MAAO,IAC1C1B,EAAauB,OAwBVtB,GAAY,kBAAC,EAAD,MACZe,GAASA,IC9DIW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS5B,SAAS6B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8e470218.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport {Parser} from 'html-to-react';\r\nimport {XmlEntities} from 'html-entities';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\nvar htmlToReactParser = new Parser();\r\nvar entities = new XmlEntities();\r\n\r\nfunction App() {\r\n  const [srdata, setSrdata] = useState(null);\r\n  const [subreddit, setSubreddit] = useState(\"\");\r\n  const [fetching, setFetching] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchSubredditData(\"rust\");\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!srdata) return;\r\n    document.title = srdata.data.children[0].data.subreddit + ' posts';\r\n  });\r\n\r\n  const fetchSubredditData = async (subreddit) => {\r\n    setFetching(true);\r\n    setSrdata(null);\r\n\r\n    let data = {\r\n      subreddit,\r\n    }\r\n\r\n    let res = await fetch(`/subreddit/data/`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    if (!res) return;\r\n\r\n    let srdata = await res.json();\r\n    if (!srdata) return;\r\n\r\n    setFetching(false);\r\n    setSrdata(srdata);\r\n  }\r\n\r\n  const onSubredditChange = (e) => {\r\n    let value = e.target.value.replace(/\\s/g, '');\r\n    setSubreddit(value);\r\n  }\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    fetchSubredditData(subreddit);\r\n  }\r\n\r\n  let posts = null;\r\n  if (srdata && srdata.data) {\r\n    posts = srdata.data.children.map((item, index) => {\r\n      return <Post key={index.toString() + subreddit} item={item} />\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <header><h1>Reddit Client</h1></header>\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          value={subreddit}\r\n          placeholder=\"Search for a subreddit\"\r\n          onChange={onSubredditChange} />\r\n      </form>\r\n      {fetching && <Spinner />}\r\n      {posts && posts}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Post(props) {\r\n  const [clicked, setClicked] = useState(false);\r\n\r\n  const onClick = () => {\r\n    setClicked(!clicked);\r\n  }\r\n\r\n  const onLinkClick = (e) => {\r\n    e.stopPropagation();\r\n  }\r\n\r\n  let hasContent = props.item.data.selftext_html ? true : false;\r\n\r\n  let element = null;\r\n  if (clicked && hasContent) {\r\n    let decoded = entities.decode(props.item.data.selftext_html);\r\n    element = htmlToReactParser.parse(decoded);\r\n  }\r\n\r\n  return (\r\n    <section className=\"post\">\r\n      <p className=\"post-paragraph\" onClick={onClick}>\r\n        <div className=\"icon\">\r\n          {hasContent && <span className=\"fa fa-search\" />}\r\n        </div>\r\n        <a className=\"icon fa fa-link\" href={props.item.data.url} onClick={onLinkClick} target=\"_blank\" rel=\"noopener noreferrer\"></a>\r\n        {props.item.data.title}\r\n      </p>\r\n      {clicked && element &&\r\n      <div className=\"selftext\">{element}</div>}\r\n    </section>\r\n  );\r\n}\r\n\r\nconst Spinner = () =>\r\n  <div className=\"spinner\">\r\n    <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n  </div>;\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}